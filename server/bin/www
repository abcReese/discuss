#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
const socket = require('socket.io');
const controllers = require('../controllers');
const UserModel=require('../model/users');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());
const io=socket(server);
global.$sockets = io.sockets.sockets;
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

global.$userHash = {};
global.$sockets = io.sockets.sockets;

let userHash = global.$userHash;
//监听socket
io.on('connection',function(socket){
  Object.keys(controllers)
    .forEach(module => {
      Object.keys(controllers[module])
        .forEach(key => {
          socket.on(key, controllers[module][key]);
        });
    });
  socket.on('userConnect', function(email,callback) {
    userHash[email] = socket.id;
    console.log(email+'succeed connect');
    callback();
  });
  //监听客户端正常断开连接
  socket.on('userDisconnect',async function(email) {
    delete userHash[email];

    console.log(email+' disconnect');
    await UserModel.logOut(email);
  });
  //监听客户端异常断开连接
  socket.on('disconnect',async function() {
    let email = '';
    Object.keys(userHash)
      .find(key => {
        if (userHash[key] === socket.id) {
          email = key;
          return true;
        }
      });
    await UserModel.logOut(email);
    delete userHash[email];
  });
})
